#!/usr/bin/perl

use strict;

use Cwd qw(getcwd abs_path);
use File::Path qw(make_path);
use IO::Socket::INET;
use threads;
use threads::shared;
use Getopt::Long qw(:config no_ignore_case bundling auto_help);
use File::Basename qw(dirname);

my $__scriptdir;
BEGIN { $__scriptdir = dirname(abs_path($0)); }
use lib $__scriptdir;
use rxplib::config qw(readconfig);
use rxplib::logging qw(verbose setverbose printmsg memsize2string);
use rxplib::jobs qw(runjob);
use rxplib::net qw(recvlong);
use rxplib::sys qw(interpmemsize getmemavail);

$| = 1;

# Protocol version
my $PROTOCOL_VERSION = "1.3";

# The name of the default working group
my $DEFAULT_GROUPNAME = '__defaulte__';

# Check arguments and set default paths
my $maxjobs = undef;
my $qmanager = undef;
my $serveraddress = undef;
my $serverport = undef;
my $hostname = undef;
my $groupname = $DEFAULT_GROUPNAME;
my $minmemory = undef;

GetOptions(
	'connect|c=s'	=> \$qmanager,
	'host|h=s'	=> \$hostname,
	'verbose|v'	=> sub { setverbose(1); },
	'group|g=s'     => \$groupname,
	'mem|m=s'	=> \$minmemory,
) or die "Execution terminated.\n";

# One bare options for the number of jobs is required
$maxjobs = shift @ARGV;
die "Extra arguments: " . join(' ', @ARGV) . "\n" if @ARGV;

if (defined $qmanager) {
	die "Invalid connection info '$qmanager'\n" unless $qmanager =~ /^([^:]*)(:\d*)?$/;
	$serveraddress = $1;
	$serverport = $2 if defined $2;
	$serverport =~ s/^:// if defined $serverport;
}

die "Expected number of maximum jobs for this client\n" unless defined $maxjobs;
die "Invalid number of jobs: $maxjobs\n" unless $maxjobs =~ /^[0-9]+$/ && $maxjobs > 0;

if (defined $minmemory) {
	die "Invalid argument for option --mem: $minmemory\n" unless $minmemory =~ /^\d+[kmgKMG]?/;
	$minmemory = interpmemsize($minmemory);
	my $showmemory = memsize2string($minmemory, 3);
	verbose "Don't start experiments if available memory is less than $showmemory";

	# Test if we can poll /etc/meminfo
	my $freenow = getmemavail;
	die "Could not poll the system for the amount of free memory. Please check if the\n" .
			"file /proc/meminfo is avilable and readable, and that it contains the string\n" .
			"'MemAvailable'. If not, then the option --mem will not work on this system.\n" unless defined($freenow) && $freenow >= 0;

	if ($freenow < $minmemory) {
		$freenow = memsize2string($freenow, 3);
		die "Not enough memory! Available: $freenow, requested: $showmemory.\n";
	}
}

# Read configurations from file
my %conf = readconfig();
for my $key (keys %conf) {
	if ($key eq "port" && (!defined $serverport || $serverport eq "")) {
		$serverport = $conf{$key};
		print "Using port $serverport as specified from config file\n";
	}
	elsif ($key eq "qmanager" && (!defined $serveraddress || $serveraddress eq "")) {
		$serveraddress = $conf{$key};
		print "Using server address $serveraddress as specified from config file\n";
	}
	elsif ($key eq "hostname" && !defined $hostname) {
		$hostname = $conf{$key};
		print "Using hostname $hostname as specified from config file\n";
	}
}

# Unless the host name is specified in the configuration file, try to get it from the hostname command
($hostname = `hostname -s`, chomp $hostname) unless defined $hostname;
die "Can't handle this hostname: '$hostname'\n" unless $hostname =~ /^[-_a-zA-Z0-9]+$/;

# Save temporary files in /tmp/runexp
unless (-d '/tmp/runexp') {
	mkdir '/tmp/runexp' or die "Can't create temporary directory to store jobs: $!\n";
}

# Workers will lock the flag below when checking if the system is low on memory; if it is, then
# the worker will hold the lock until there is enough available memory
my $lowonmemory :shared = 0;

# The commbusy flag is used to indicate that a thread is trying to communicate with the server. We
# lock this variable because otherwise we would have to lock $masterstop and $serversocket
my $commbusy :shared = 0;

# If the shared variable masterstop is set to 1, then all workers will cease requesting new jobs
my $masterstop :shared = 0;

# If the shared variale onhold is set to 1, then we have been put on hold. That means the manager
# will be evaluating any jobs we are currently running before sending in new jobs. When this
# happens, the ID of the worker who received the on-hold signal is saved. Until the hold is,
# lifted only that specific worker is allowed to communicate with the manager
my $onhold :shared = 0;
my $heldworker :shared = 0;

# If the shared variable banned is set to 1, then this means we were banned. Instead of "done", 
# this will cause the runner to print a sad face
my $banned :shared = 0;

# Try to connect to and hail the server
verbose "Connecting to server at $serveraddress:$serverport";
my $serversocket = IO::Socket::INET->new(
	PeerAddr => $serveraddress,
	PeerPort => $serverport,
	Proto    => 'tcp',
) or die "Error connecting to server at $serveraddress:$serverport: $!\n";
hail_server($serversocket);

# Create workers and wait for them to finish
my @workers;
for my $i (1 .. $maxjobs) {
	my $worker = threads->create(\&workerloop, $i, $serversocket);
	push @workers, $worker;
}
for my $worker (@workers) {
	$worker->join();
}

# When we have finished, properly end communications
bye_server($serversocket);
$serversocket->close();
if ($banned) {
	print "This runner failed too many experiments and was banned.   :(\n";
}
else {
	print "Done!\n";
}



###################



sub workerloop {
	my $id = shift;
	my $serversocket = shift;
	my $joboutcome;
	my $joboutput;

	verbose "Worker $id started";

	while (1) {
		my ($job, $jobtype, $jobdata);
		checkformemory($id) if defined $minmemory;
		(verbose "Worker $id: finished" and return) unless askforjob($id, $serversocket, \$job, \$jobtype, \$jobdata);
		if ($jobtype eq "__wait__") {
			# Manager just told me we misbehaved, and I should wait before I ask for more jobs. During
			# that time, the manager will be evaluating my performance: if I fumble too much, we will
			# be banned. If that happens, wake up and get out of here
			my $sleep = 10;
			while ($sleep--) {
				return if $masterstop;
				sleep 1;
			}
		}
		else {
			verbose "Worker $id: got a new job -- $job";
			($joboutcome, $joboutput) = runjob($hostname, $job, $jobtype, $jobdata);
			sendjoboutcome($id, $serversocket, $job, $joboutcome, $joboutput);
		}
	}
}



# If a minimum amount of memory has been specified, does not continue unless the system can handle that
sub checkformemory {
	my $id = shift;

	return if $masterstop;

	verbose "Worker $id: [checkformemory] trying to get lock";
	lock $lowonmemory;
	verbose "Worker $id: [checkformemory] I have to lock";

	# If a low-memory situation was detected, the worker will be blocked by the previous lock; therefore, if
	# we reached here, then a previous low-memory state is either non-existent or finished
	my $free = getmemavail;
	if ($free < $minmemory) {
		verbose "Worker $id: [checkformemory] system is low on memory";
		my $memshow = memsize2string($free, 3);
		printmsg $hostname, "System is low on memory ($memshow): waiting...";
	}
	else {
		verbose "Worker $id: [checkformemory] relinquishing lock";
		return;
	}

	# Loop until the sytem has enough memory to get more jobs, keeping the lock. However, if the MASTERSTOP flag is
	# raised by another worker, then return control to the caller
	do {
		if ($masterstop) {
			verbose "Worker $id: [checkformemory] interrupted by MASTERSTOP flag";
			verbose "Worker $id: [checkformemory] relinquishing lock";
			return;
		}
		sleep 1;
	} while (getmemavail() < $minmemory);

	# If we got here, that's because we were in low-memory and we are no fine. Let the user know
	my $memshow = memsize2string(getmemavail, 3);
	printmsg $hostname, "Available memory is sufficient again ($memshow)";

	verbose "Worker $id: [checkformemory] relinquishing lock";
}


# Tell the manager that a job has been complete and if it was successful
sub sendjoboutcome {
	my $id = shift;
	my $serversocket = shift;
	my $job = shift;
	my $outcome = shift;
	my $output = shift;

	my $outputlen = length $output;
	my $msg = "REZULTO $job $outcome $outputlen";

	verbose "Worker $id: [sendjoboutcome] trying to get lock of communications";
	lock $commbusy;
	verbose "Worker $id: [sendjoboutcome] I have the lock";

	verbose "Worker $id: sending message '$msg'";
	$serversocket->send($msg);

	verbose "Worker $id: waiting for server acknowledgement";
	$serversocket->recv($msg, 1024);
	die "Unexpected message received: $msg\n" unless $msg eq "PRETA";

	verbose "Worker $id: sending job outout ($outputlen bytes)";
	$serversocket->send($output);

	verbose "Worker $id: waiting for server acknowledgement";
	$serversocket->recv($msg, 1024);
	die "Unexpected message received: $msg\n" unless $msg eq "RICEVIS";

	verbose "Worker $id: [sendjoboutcome] relinquishing lock";
}


# Ask server for job
sub askforjob {
	my $id = shift;
	my $serversocket = shift;
	my $jobname = shift;
	my $jobtype = shift;
	my $jobdata = shift;

	my $msg;

	# Lock the communication flag
	verbose "Worker $id: [askforjob] trying to get lock of communications";
	lock($commbusy);
	verbose "Worker $id: [askforjob] I have the lock";

	# If another worker received a FINO message, then there are no more jobs
	(verbose "Worker $id: MASTERSTOP raised" and return 0) if $masterstop;

	# If another worker was put on hold, then this worker is not allowed to talk to the manager
	if ($onhold && $heldworker != $id) {
		verbose "Worker $id: [askforjob] while runner is on hold, only worker $id is allowed to talk";
		verbose "Worker $id: [askforjob] relinquishing lock";
		$$jobtype = "__wait__";
		return 1;
	}

	verbose "Worker $id: sending server the message 'PETO'";
	$serversocket->send('PETO');

	verbose "Worker $id: waiting for job from the server";
	$serversocket->recv($msg, 1024);
	verbose "Worker $id: received message '$msg'";

	# Process return: ATENDI because runner was put on hold until further evaluation; ELIRI because
	# runner was banned for failing too many experiments, FINO because there are no more jobs to
	# run, or LABORO ... with information on a new job
	if ($msg eq "ATENDI") {
		# Manager asked us to wait. Register the ID of the worker who received that message.
		# All communication with the manager is interrupted for all workers except me
		unless ($onhold) {
			printmsg $hostname, "Runner put on hold for failing experiments" unless $onhold;
			$heldworker = $id;
		}
		$onhold = 1;
		$$jobtype = "__wait__";
		verbose "Worker $id: [askforjob] relinquishing lock";
		return 1;
	}
	elsif ($msg eq "ELIRI") {
		# We were banned!!    :(
		verbose "Worker $id: we were banned! :(";
		verbose "Worker $id: [askforjob] relinquishing lock";
		$masterstop = 1;
		$banned = 1;
		return 0;
	}
	elsif ($msg eq "FINO") {
		verbose "Worker $id: no more jobs; raising MASTERSTOP";
		verbose "Worker $id: [askforjob] relinquishing lock";
		$masterstop = 1;
		return 0;
	}

	if ($onhold) {
		printmsg $hostname, "Manager lifted hold: new jobs coming!";
		$onhold = 0;
	}

	$msg =~ /^LABORO (.+) (\.[^ ]+) (\d+)$/ or die "Worker $id: Unexpected message $msg";
	$$jobname = $1;
	$$jobtype = $2;
	my $jobsize = $3;

	verbose "Worker $id: asking for job data ($jobsize bytes)";
	$serversocket->send("PRETA");

	verbose "Worker $id: waiting job data ($jobsize bytes)";
	$$jobdata = recvlong($serversocket, $jobsize);

	verbose "Worker $id: [askforjob] relinquishing lock";
	return 1;
}


# Handshake server: this is executed before workers are created, so there is no
# need to lock anything
sub hail_server {
	my $serversocket = shift;

	# Identify myself to the manager
	verbose "Sending server the 'SALUTON' hail";
	$serversocket->send("SALUTON; MI $hostname");

	# Check protocol version
	verbose "Waiting for protocol version";
	my $msg;
	$serversocket->recv($msg, 1024);
	verbose "Received version string '$msg'";
	die "Bad protocol version: '$msg'\n" unless $msg =~ /^VERSIO \d+(.\d+)?$/;
	$msg =~ s/^VERSIO //;
	die "Bad protocol version: '$msg'\n" unless $msg eq $PROTOCOL_VERSION;
	verbose "Version accepted. Sending server acknowledgement message";
	$serversocket->send("KOMPRENAS");

	# Check if a group name is needed
	$serversocket->recv($msg, 1024);
	verbose "Received group message: '$msg'";
	die "Bad group message: '$msg'\n" unless $msg =~ /^ALIGI ([^\s]+)$/;
	my $managergroup = $1;
	my $mygroup = ($groupname eq $DEFAULT_GROUPNAME ? "default working group" : "working group '$groupname'");
	if ($groupname ne $managergroup) {
		my $theirgroup = ($managergroup eq $DEFAULT_GROUPNAME ? "default working group" : "working group '$managergroup'");
		die "I'm trying to join the $mygroup, but the queue manager is running\n" .
			"on the $theirgroup.\n" .
			"This might be the wrong connection. Please verify your connection settings or\n" .
			"specify a different group.\n";
	}

	# Join the group
	print "Joining the queue manager on the $mygroup\n";
	$serversocket->send("JES");
}


# Finish conversation with server
sub bye_server {
	my $serversocket = shift;

	verbose "Sending server the 'FINO ANKAU' message";
	$serversocket->send("FINO ANKAU");
}

__END__
=head1 NAME

experiment runner

=head1 SYNOPSIS

runexp <MAXJOBS> [<BASEDIR>] [OPTIONS]

This is the experiment runner for runexp. runexp is a system designed to launch
experiments in several experiment servers sockets for communication.

Mandatory:

  <MAXJOBS>  Mandatory argument that specifies how many experiments should be
	       simultaneously in execution at a time.

Options:

  -c, --connect <SERVER>:<PORT>
  	     Specify that the queue manager is located on host <SERVER> at port
	       <PORT> (e.g.: localhost:5432)
  -g, --group <GROUPNAME>
	     Join a working groupwith name <GROUPNAME>. If the manager is not
	       running on the specified group, or if the manager is running a
	       group and none was specified in the command line, then the
	       connection is terminated.
  -h, --host <NAME>
  	     Use <NAME> as hostname instead of system name.
  -v         Print detailed information.
  -m, --mem <VALUE>
	     Don't start new jobs if physical memory is inferior to <VALUE>.
		The prefixes [KMGkmg] may be used and correspond to powers of
		two, so 1K equals 1024 bytes, 1M equals 1024M, and so on.

runexp is hosted at GitHub. For source code and more information on how to use
runexp, please visit github.com/rfgiusti/runexp
