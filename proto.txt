Communication between manager and runners via sockets
-----------------------------------------------------


This drafts the communication protocol version 1.1


SERVER-SIDE
-----------

Server states:

1) Accept
2) Wait
3) SendJob
4) ProcessJob
5) WaitClose

State 1: Accept

	1. Wait for a connection
	2. When a client connects, wait for the hail "SALUTON; MI <HOSTNAME>".
	   Proceed to use <HOSTNAME> as this client's identifier
	3. If a different message is received, terminate the connection
	4. Write "VERSIO <PROTOCOL VERSION>" on the client socket
	5. Wait for client acknowledge with the message "KOMPRENAS"
	6. Start processing this client on state 2, continue expecting other
	   clients on state 1

Stete 2: Wait

	1. Wait for client to send message
	2. If the received message is in the form "PETO", then it is a request
	   for job, go to sate 3; if the message is in the form "REZULTO", then
	   it is informing of a job that has been finished, go to state 4

State 3: SendJob

	1. If there are no more jobs to run, go to state 5
	2. Take the next job from the list, write on the client's socket in the
	   form "<JOBNAME>"
	3. Go to state 2

State 4: ProcessJob

	1. Server enters this state after receiving the message
	   "REZULTO <JOBNAME> <STATUS> <SIZE>"; if the job <JOBNAME> has been
	   spawned by the queue manager, got to step 2. Otherwise, drop the
	   client with an error message
	2. Take note that the job <JOBNAME> was finished with status <STATUS>
	3. Send the client the message "PRETA" indicating the the server is
	   ready to receive the program output
	4. Receive a message of <SIZE> bytes containing the program output
	5. Send the client the message "RICEVIS"
	6. Go to source state (state 2 or state 5)

State 5: WaitClose

	1. If coming back from state 4, go to step 3
	2. Write the message "FINO" on the client's socket indicating that
	   there are no more jobs to run
	3. Wait for client reply
	4. If reply was "FINO ANKAU", then the client is also done, drop the
	   connection and terminate client
	5. If reply was "REZULTO", go to state 4



CLIENT-SIDE
-----------

Workers run independently in threads; state 1 describes the main thread. Other
states apply to individual workers

States:

1) Initialization
2) WorkerLoop
3) WaitClose

State 1: Initialization

	1. Connect to the server
	2. Send the hail "SALUTON; MI <HOSTNAME>"
	3. Waits for protocol version
	4. If server send the message "VERSIO <PROTOCOL VERSION>" and the version
	   number is acceptable, go to state 5. Otherwise, kill the connection
	   and terminate the execution
	5. Send the message "KOMPRENAS"
	6. Start all workers on state 2

State 2: WorkerLoop

	1. Check if the flag MASTERSTOP is raised; if so, go to state 4
	2. Stop all other workers from communicating with the server
	3. Send a request to the server in the form "PETO"
	4. Wait for the server to reply. When the reply is received, reallow
	   other workers to communicate
	5. If the message was "FINO", go to state 2
	6. Otherwise, assume the message was a job name. Run the job
	7. When the job finishes executing, take lock of communications
	8. Ssend the message "REZULTO <JOBNAME> <STATUS> <SIZE>", signaling the
	   manager that job <JOBNAME> finished with outcome <STATUS> and that
	   its output contains <SIZE> bytes
	9. Wait for server to ACK with the message "PRETA"
	10. Send the output
	11. Wait for server to ACK with message "RICEVIS"
	12. Unlock communications and go to step 1

State 3: WaitClose

	1. If this is the last worker to reach the WaitClose state, send the
	   server the message "FINO ANKAU" in response to its "FINO". Close
	   the connection and terminate the worker. Otherwise, just 
	   terminate the worker
