Communication between manager and runners via sockets
-----------------------------------------------------


This drafts the communication protocol version 1.3


SERVER-SIDE
-----------

Server states:

1) Accept
2) Wait
3) SendJob
3-2) ClientOnHold
4) ProcessJob
5) WaitClose

State 1: Accept

	1. Wait for a connection
	2. When a client connects, wait for the hail "SALUTON; MI <HOSTNAME>".
	   Proceed to use <HOSTNAME> as this client's identifier
	3. If a different message is received, terminate the connection
	4. Write "VERSIO <PROTOCOL VERSION>" on the client socket
	5. Wait for client to acknowledge with the message "KOMPRENAS"
	6. Reply with the message "ALIGI <GROUP NAME>"
	7. Wait for client to acknowledge with the message "JES"
	8. Start processing this client on state 2, continue expecting other
	   clients on state 1

Stete 2: Wait

	1. Wait for client to send message
	2. If the received message is in the form "PETO", then it is a request
	   for job. If the client is still eligible to run jobs, go to state 3,
	   otherwise, got to state 3-2; however if the message is in the form
	   "REZULTO", then it is informing of a job that has been finished, go
	   to state 4

State 3: SendJob

	1. If there are no more jobs to run, go to state 5
	2. Take the next job from the list, write on the client's socket in the
	   form "LABORO <JOBNAME> <JOBTYPE> <SIZE>", where <SIZE> is the size of
	   the job in bytes
	3. Wait for the client to reply with "PRETA"
	4. Send the contents of the job
	5. Go to state 2

State 3-2: ClientOnHold

	1. The client misbehaved, so it will not be allowed to run jobs for a
	   while. When a misbehaving client asks for a job, the manager replies
	   with either "ELIRI" (when no more jobs will be sent to the client,
	   but the manager may still be waiting results from previous jobs) or
	   "ATENDI", when the manager may still be willing to send jobs to the
	   client, but it should wait until the manager has evaluated the
	   client's performance on its last jobs.

State 4: ProcessJob

	1. Server enters this state after receiving the message
	   "REZULTO <JOBNAME> <STATUS> <SIZE>"; if the job <JOBNAME> has been
	   spawned by the queue manager, got to step 2. Otherwise, drop the
	   client with an error message
	2. Take note that the job <JOBNAME> was finished with status <STATUS>
	3. Send the client the message "PRETA" indicating the the server is
	   ready to receive the program output
	4. Receive a message of <SIZE> bytes containing the program output
	5. Send the client the message "RICEVIS"
	6. Go to source state (state 2 or state 5)

State 5: WaitClose

	1. If coming back from state 4, go to step 3
	2. Write the message "FINO" on the client's socket indicating that
	   there are no more jobs to run
	3. Wait for client reply
	4. If reply was "FINO ANKAU", then the client is also done, drop the
	   connection and terminate client
	5. If reply was "REZULTO", go to state 4



CLIENT-SIDE
-----------

Workers run independently in threads; state 1 describes the main thread. Other
states apply to individual workers

States:

1) Initialization
2) WorkerLoop
3) RunJob
4) SendOutcome
5) WaitClose

State 1: Initialization

	1. Connect to the server
	2. Send the hail "SALUTON; MI <HOSTNAME>"
	3. Waits for protocol version
	4. If server send the message "VERSIO <PROTOCOL VERSION>" and the version
	   number is acceptable, go to state 5. Otherwise, kill the connection
	   and terminate the execution
	5. Send the message "KOMPRENAS"
	6. Wait for the server to send the group name in the form of the message
	   "ALIGI <GROUP NAME>"
	7. If the group name is valid, send the message "JES". Otherwise
	   terminate the connection
	9. Start all workers on state 2

State 2: WorkerLoop

	1. Check if the flag MASTERSTOP is raised; if so, go to state 5
	2. Go to state 3

State 3: RunJob

	1. Stop all other workers from communicating with the server
	2. Send a request to the server in the form "PETO". Wait for reply
	3. If the reply was "FINO", reallow communications and go to state 5
	4. If the message is "ELIRI" or "ATENDI", go to state 6. Otherwise,
	   message should be "LABORO <JOBNAME> <JOBTYPE> <SIZE>; continue
	   on step 5
	5. Acknowledge by sending the server the message "PRETA"
	6. Receive <SIZE> bytes of data from the server into <JOBCONTENTS>
	7. Write <JOBCONTENTS> to a temporary file
	8. Reallow communications
	9. Run the job
	10. Go to state 4

State 4: SendOutcome

	1. Wait for job to finish
	2. Collect the job output into <OUTPUT> and its outcome (success or
	   failure) into <STATUS>
	3. Lock communications
	4. Send the message "REZULTO <JOBNAME> <STATUS> <SIZE>", signaling the
	   manager that job <JOBNAME> finished with outcome <STATUS> and that
	   its output contains <SIZE> bytes
	9. Wait for server to ACK with the message "PRETA"
	10. Send the output <OUTPUT>
	11. Wait for server to ACK with message "RICEVIS"
	12. Unlock communications and go to state 2

State 5: WaitClose

	1. If this is the last worker to reach the WaitClose state, send the
	   server the message "FINO ANKAU" in response to its "FINO". Close
	   the connection and terminate the worker. Otherwise, just 
	   terminate the worker

State 6: ClientOnHold

	1. If the message was "ELIRI", then this client misbehaved too much
	   and was kicked out of the runexp ring. The worker should raise the
	   MASTERSTOP flag, re-enable communications and go to state 5
	2. Otherwise, the message was "ATENDI". The server is waiting for the
	   client to finish any jobs it is currently running. The worker must
	   re-enable communications, wait 10 seconds, and then go to state 2
